---
settings:
  chains:
    relay_chain:
      wsPort: 9900
    community_para_A: &cp_A
      wsPort: 9910
    community_para_B: &cp_B
      wsPort: 9920
      paraId: &cp_id_B 2001
  variables:
    common:
      required_weight_at_most: &weight_at_most 1000000000
      amountX2: &amountX2 2000000000000
      amount: &amount 1000000000000
    chains:
      relay_chain:
        ksm: &rc_ksm { concrete: { parents: 1, interior: { here: true }}}
        ksm_fungible: &rc_ksm_fungible { id: *rc_ksm, fun: { fungible: *amount }}
      community_para_A:
        signer: &cp_A_signer //Alice
        community_para_B_destination: &cp_B_dest { v1: { parents: 1, interior: { x1: { parachain: *cp_id_B }}}}
        # sovereign_account: &cp_A_sovereign F7fq1jSNVTPfJmaHaXCMtatT1EZefCUsa7rRiQVNR5efcah
        # sovereign_account: &cp_A_sovereign FBeL7EAeUroLWXW1yfKboiqTqVfbRBcsUKd6QqVf4kGBySS
        sovereign_account: &cp_A_sovereign 5Eg2fntJ27qsari4FGrGhrMqKFDRnkNSR6UshkZYBGXmSuC8
        # community_para_B_asset: &cp_B_asset { concrete: { parents: 1, interior: { x1: { parachain: *cp_id_B }}}}
        # community_para_B_asset_fungible: &cp_B_fungible { id: *cp_B_asset, fun: { fungible: *amount }}
      community_para_B:
        signer: &cp_B_signer //Alice
  decodedCalls:
    system_remark:
      chain: *cp_B
      pallet: system
      call: remark
      args: [ 0x0011 ]
    balance_transfer:
      chain: *cp_B
      pallet: balances
      call: transfer
      args: [
        5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty,
        *amount
      ]

tests:
  - name: Send Transacts between Parachains
    before:
      - name: DEPENDANCY | Community Parachain A sovereign account in Community Parachain B needs to be funded
        actions:
          - extrinsics:
            - chain: *cp_B
              delay: 1000
              signer: *cp_B_signer
              pallet: balances
              call: transfer
              args: [ 
                *cp_A_sovereign, # destination
                *amountX2, # value
              ]
              events:
                - name: balances.Transfer
    describes:
      - name: polkadotXcm.send | Superuser - Transact(system.remark) | Para A -> Para B
        its:
          - name: Should send a Transact to be executed in a sibling Parachain
            actions:
              - extrinsics:
                - chain: *cp_A
                  delay: 1000
                  signer: *cp_A_signer
                  sudo: true
                  pallet: polkadotXcm
                  call: send
                  args: [ 
                      *cp_B_dest, # destination 
                      { 
                        v2: [ #message
                          { 
                            WithdrawAsset: [*rc_ksm_fungible]
                          },
                          {
                            BuyExecution: {
                                fees: *rc_ksm_fungible,
                                weightLimit: Unlimited
                            }
                          },
                          { 
                            Transact: { 
                              originType: SovereignAccount, 
                              requireWeightAtMost: *weight_at_most, 
                              call: $balance_transfer
                            }
                          }
                        ]  
                      }
                    ]
                  events:
                    - name: sudo.Sudid
                      attributes:
                        type: Result<Null, SpRuntimeDispatchError>
                        value: Ok
                    - name: polkadotXcm.Sent